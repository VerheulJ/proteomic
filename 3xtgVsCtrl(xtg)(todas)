
library(readxl)
library(data.table)
#library(ggpubr)
library(readr)
library(stats)
library(formattable)
library(dplyr)
library(car)
library(ggplot2)
library(ggrepel)
library(xlsx)
library(openxlsx)
options(scipen = 999)




entera_3TG <- read_excel("proteomica/ejercicio/3-TG/230414-LFQ_Filtradas.xlsx")



#cojo la tabla grande y la modifico para quedarme solo con el nombre del gen y el código de acceso, adicionalmente añado un subfijo a la tabla para poder
#tablar cómodamente cuando utilice las tablas con el otro modelo 
accesion_3TG<-select(entera_3TG, Accession)
gene_ID_3TG<-select(entera_3TG, "Gene Symbol")
df_3TG<-entera_3TG
abundancias_3TG<-df_3TG[,140:158]
abundancias_3TG[is.na(abundancias_3TG)] <- 0
colnam<-colnames(abundancias_3TG)
colnam <- gsub(".*F(\\d+).*", "\\1", colnam)
colnam <- paste("F", gsub("\\D+", "", colnam), sep = "")
colnam <- paste(colnam, "_3TG", sep = "")
colnames(abundancias_3TG) <- colnam
df_3TG<-cbind(accesion_3TG, gene_ID_3TG, abundancias_3TG)

#uno las columnas que he seleccionado creando df_3TG que es el dataframe más importante

df_3TG<-cbind(accesion_3TG, gene_ID_3TG, abundancias_3TG)

#voy a borrar las líneas vacías que me dan errores luego


# # Calcular la suma de las columnas en el dataframe de control
# media_total <- rowSums(df_3TG[, -(1:2)])
# # Calcular la media de control y borrar las que tengan media 0 porque es un error
# filas_con_media_cero <- which(media_total == 0)
# df_3TG <- df_3TG[-filas_con_media_cero, ]
# rownames(df_3TG) <- NULL



#añado los metadatos 
sample_metadata_3TG <- read_delim("proteomica/ejercicio/3-TG/sample-metadata-3TG.csv", 
                                  delim = "\t", escape_double = FALSE, 
                                  trim_ws = TRUE)

colnam<-data_frame(colnam)
colnames(colnam)<-"sample-id"

#modifico la tabla de los mentadatos para que tenga el mismo subfijo que tienen los nombres de las columnas del dataframe principal
# para que puedan encontrarse sin problema 
sample_metadata_3TG<- cbind(colnam, sample_metadata_3TG[,-1])


# creo las tablas con los grupos experimentales y controles por separado 
prot_control_3TG <- sample_metadata_3TG %>%
  filter(experiment == "WT") %>%
  pull("sample-id")

tabla_control_3TG <- df_3TG %>%
  select(1, 2, all_of(prot_control_3TG))

prot_experimento_3TG <- sample_metadata_3TG %>%
  filter(experiment == "3xTg") %>%
  pull("sample-id")

tabla_experimento_3TG <- df_3TG %>%
  select(1, 2, all_of(prot_experimento_3TG))


tabla_experimento_3TG <- tabla_experimento_3TG %>%
  arrange(Accession)
tabla_control_3TG <- tabla_control_3TG %>%
  arrange(Accession)


ncontrol<-ncol(tabla_control_3TG) - 2
nexp<-ncol(tabla_experimento_3TG) - 2
ind <- tabla_experimento_3TG[,(1:2)]


# Calcular la suma de las columnas en el dataframe de control
tabla_control_3TG_datos<-tabla_control_3TG
tabla_control_3TG_datos$suma<-rowSums(tabla_control_3TG[, -(1:2)])
tabla_control_3TG_datos$media<- tabla_control_3TG_datos$suma / ncontrol

tabla_experimento_3TG_datos<-tabla_experimento_3TG
tabla_experimento_3TG_datos$suma<-rowSums(tabla_experimento_3TG[, -(1:2)])
tabla_experimento_3TG_datos$media<- tabla_experimento_3TG_datos$suma / nexp



# normalizar los datos del experimento 
tabla_experimento_3TG_normalizado_numeros <- tabla_experimento_3TG[, -(1:2)] / tabla_control_3TG_datos$media
# Asignar nombres de columna
colnames(tabla_experimento_3TG_normalizado_numeros) <- colnames(tabla_experimento_3TG[, -(1:2)])
tabla_experimento_3TG_normalizado<-cbind(ind, tabla_experimento_3TG_normalizado_numeros)

#normalizar los datos de los controles

tabla_control_3TG_normalizado_numeros<-tabla_control_3TG[,-(1:2)] / tabla_control_3TG_datos$media
tabla_control_3TG_normalizado<-cbind(ind,tabla_control_3TG_normalizado_numeros)


#calcular la media de los datos normalizados
# Calcular la suma de las columnas en el dataframe de control
tabla_control_3TG_datos_n<-tabla_control_3TG_normalizado_numeros
tabla_control_3TG_datos_n$suma<-rowSums(tabla_control_3TG_normalizado_numeros)
tabla_control_3TG_datos_n$media<- tabla_control_3TG_datos_n$suma / ncontrol

tabla_experimento_3TG_datos_n<-tabla_experimento_3TG_normalizado_numeros
tabla_experimento_3TG_datos_n$suma<-rowSums(tabla_experimento_3TG_normalizado_numeros)
tabla_experimento_3TG_datos_n$media<- tabla_experimento_3TG_datos_n$suma / nexp


#calcular las inferencias estadística

p_valor_test <- c()
for (i in 1:nrow(tabla_control_3TG_normalizado_numeros)){
  valores_3TG<-as.numeric(tabla_experimento_3TG_normalizado_numeros[i,])
  valores_control<-as.numeric(tabla_control_3TG_normalizado_numeros[i,])
  resultado_t_test<-t.test(valores_control, valores_3TG)
  p_valor_test<-c(p_valor_test, resultado_t_test$p.value)
  
}

df_3TG_datos<-df_3TG
df_3TG_datos$p.valor<-p_valor_test
df_3TG_datos$media<-rowSums(df_3TG[,-(1:2)])/ ( nexp + ncontrol)
resultado_final_test<-data.frame(tabla_experimento_3TG[,1], p_value = p_valor_test)
num_valores_menor_0_05 <- sum(resultado_final_test[,2] < 0.01)



cociente<-tabla_experimento_3TG_datos$media / tabla_control_3TG_datos$media
cociente<-data.frame(cociente)
log2cociente<-apply(cociente, 1, log2)
log2cociente<-data_frame(log2cociente)

p_valor_test<-data_frame(p_valor_test)
log10pvalor<-apply(p_valor_test, 1, log10)
log10pvalor<-data_frame(log10pvalor)
log10pvalor<-apply(log10pvalor, 1, function(x) -x)
log10pvalor<-data_frame(log10pvalor)


vulcanot<-data_frame(ind, log2cociente, log10pvalor)




p_valor001<-1.9999999999999996


vulcanot_etiquetas<- vulcanot %>% filter(log2cociente < -1 | log2cociente > 1)
vulcanot_etiquetas<- vulcanot_etiquetas %>% filter(log10pvalor>p_valor001)



# mas altos sobrexpresados


tops<- vulcanot_etiquetas %>% filter(log2cociente>1)
tops <- tops %>% arrange(desc(log10pvalor)) %>%  # Ordenar el DataFrame por 'log10pvalor' en orden descendente
  head(3)                         # Seleccionar las primeras tres filas

top_rows<-tops


# Obtener los valores de la columna 'Accesion' de las tres filas
sobreexpresadas_evidentes_accesion <- top_rows$Accession

# mas altos subrexpresados

high_negative_rows <- vulcanot_etiquetas %>%
  filter(log2cociente < -1) %>%   # Filtrar filas con 'log2cociente' negativo
  arrange(desc(log10pvalor)) %>%  # Ordenar el DataFrame resultante por 'log10pvalor' en orden descendente
  head(3)                         # Seleccionar las primeras tres filas

# Obtener los valores de la columna 'Accesion' de las tres filas
subrrepresentadas_evidentes_accesion <- high_negative_rows$Accession

vulcanot_etiquetas_evidente<- vulcanot_etiquetas  %>% filter(log10pvalor>p_valor001)

far_rows <- vulcanot_etiquetas_evidente %>%
  arrange(desc(log2cociente)) %>%  # Ordenar el DataFrame por 'log10pvalor' en orden descendente
  head(3)                         # Seleccionar las primeras tres filas

# Obtener los valores de la columna 'Accesion' de las tres filas
mas_sobreexpresadas_accesion <- far_rows$Accession



# Obtener los tres valores máximos de 'log10pvalor' para filas con 'log2cociente' negativo
far_negative_rows <- vulcanot_etiquetas %>%
  filter(log2cociente < (-1) & log10pvalor > p_valor001) %>%   # Filtrar filas con 'log2cociente' negativo
  arrange(log2cociente) %>%  # Ordenar el DataFrame resultante por 'log10pvalor' en orden descendente
  head(3)                         # Seleccionar las primeras tres filas

mas_subrrepresentadas_accesion <- far_negative_rows$Accession

accession_values <- c(mas_sobreexpresadas_accesion, mas_subrrepresentadas_accesion, 
                      subrrepresentadas_evidentes_accesion, sobreexpresadas_evidentes_accesion)
accession_values <- data.frame("Accession" = accession_values)
subset_desrreguladas<- subset(vulcanot, Accession %in% accession_values$Accession)

########################################################################################################################
########################################################################################################################
#######################################################################################################################
########################################################################################################################
########################################################################################################################
#######################################################################################################################
########################################################################################################################
########################################################################################################################
#######################################################################################################################
sobrexpresadas<-filter(vulcanot, log2cociente>1 & log10pvalor>p_valor001)
subexpresadas<-filter(vulcanot, log2cociente<(-1) & log10pvalor>p_valor001)
resto<-anti_join(vulcanot, sobrexpresadas) %>% anti_join(subexpresadas)
sobrexpresadas$estado<-"Sobrexpresado"
subexpresadas$estado<-"Subexpresado"

# Crear el gráfico de tipo volcán con ggplot2
#Crear el gráfico de tipo volcán con ggplot2
ggplot() +
  geom_point(data = sobrexpresadas, aes(x = log2cociente, y = log10pvalor, color=estado), size = 0.5)+
  geom_point(data = subexpresadas, aes(x = log2cociente, y = log10pvalor, color=estado), size = 0.5)+
  geom_point(data = resto, aes(x = log2cociente, y = log10pvalor), color= "grey", size = 0.5)+
  
  geom_vline(xintercept = -1, linetype = "dashed", color = "black") +
  geom_vline(xintercept = 1, linetype = "dashed", color = "black") +
  
  geom_hline(yintercept = 1.9999999999999996, linetype = "dashed", color = "black") +
  
  geom_label_repel(data = subset_desrreguladas,
                   aes(x = log2cociente, y = log10pvalor, label = `Gene Symbol`),
                   color = "black", box.padding = 0.5, point.padding = 0.3,
                   force = 10, nudge_x = 0.00000001, nudge_y = 0.00000001)  +
  
  
  
  labs(
    title = "Vulcano plot 3TG/control",
    x = bquote(log[2](Fold_Change)),
    y =  bquote(-log[10](pvalue)),
    color = "Estado"
  ) +
  scale_color_manual(values = c("Sobrexpresado" = "lightsalmon", "Subexpresado" = "cadetblue3")) +
  
  theme(panel.background = element_rect(fill = "white"),
        axis.line = element_line(color = "black"),  # Color de las líneas de los ejes
        axis.text = element_text(color = "black"),  # Color del texto de los ejes
        axis.title = element_text(color = "black")  # Color de los títulos de los ejes
  )
