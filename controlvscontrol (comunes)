library(readxl)
library(data.table)
#library(ggpubr)
library(readr)
library(stats)
library(formattable)
library(dplyr)
library(car)
library(ggplot2)
library(ggrepel)
library(xlsx)
library(openxlsx)
options(scipen = 999)

sample_metadata_3TG <- read_delim("proteomica/ejercicio/3-TG/sample-metadata-3TG.csv", 
                                  delim = "\t", escape_double = FALSE, 
                                  trim_ws = TRUE)

entera_3TG <- read_excel("proteomica/ejercicio/3-TG/230414-LFQ_Filtradas.xlsx")

accesion_3TG<-select(entera_3TG, Accession)
gene_ID_3TG<-select(entera_3TG, "Gene Symbol")
df_3TG<-entera_3TG
abundancias_3TG<-df_3TG[,140:158]
abundancias_3TG[is.na(abundancias_3TG)] <- 0
colnam<-colnames(abundancias_3TG)
colnam <- gsub(".*F(\\d+).*", "\\1", colnam)
colnam <- paste("F", gsub("\\D+", "", colnam), sep = "")
colnames(abundancias_3TG) <- colnam

df_3TG<-cbind(accesion_3TG, gene_ID_3TG, abundancias_3TG)




sample_metadata_3TG <- read_delim("proteomica/ejercicio/3-TG/sample-metadata-3TG.csv", 
                                  delim = "\t", escape_double = FALSE, 
                                  trim_ws = TRUE)

prot_control_3TG <- sample_metadata_3TG %>%
  filter(experiment == "WT") %>%
  pull("sample-id")

tabla_control_3TG <- df_3TG%>%
  select(1, 2, all_of(prot_control_3TG))


entera_5XFAD <- read_excel("proteomica/ejercicio/5XFAD/230223-LFQ_Incl-Isoforms_FILTRADAS.xlsx")


prot_control_3TG <- sample_metadata_3TG %>%
  filter(experiment == "WT") %>%
  pull("sample-id")

tabla_control_3TG <- df_3TG%>%
  select(1, 2, all_of(prot_control_3TG))




#seleccionar la columna con el código de accesp y las columnas con la abundancia
#luego quiero quitarle toda la info al título para simplificarla ya que he prepaarado unos metadatos
df_5XFAD<-entera_5XFAD
accesion_5XFAD<-select(entera_5XFAD, Accession)
gene_ID_5XFAD<-select(entera_5XFAD, "Gene Symbol")


abundancias_5XFAD<-df_5XFAD[,120:134]
abundancias_5XFAD[is.na(abundancias_5XFAD)]
colnam<-colnames(abundancias_5XFAD)
colnam <- gsub(".*F(\\d+).*", "\\1", colnam)
colnam <- paste("F", gsub("\\D+", "", colnam), sep = "")
colnames(abundancias_5XFAD) <- colnam

#crear el df y transponerla y modificar el nombre de las columnas y ponerlo en notacion cientifica
df_5XFAD<-cbind(accesion_5XFAD, gene_ID_5XFAD, abundancias_5XFAD)

sample_metadata_5XFAD <- read_delim("proteomica/ejercicio/5XFAD/sample-metadata-5XFAD.csv", 
                                    delim = "\t", escape_double = FALSE, 
                                    trim_ws = TRUE)


prot_control_5XFAD <- sample_metadata_5XFAD %>%
  filter(experiment == "WT") %>%
  pull("sample-id")

tabla_control_5XFAD <- df_5XFAD %>%
  select(1, 2, all_of(prot_control_5XFAD))


# Obtener las columnas de interés
columna_3TG <- tabla_control_3TG$Accession
columna_5XFAD <- tabla_control_5XFAD$Accession


# Encontrar los elementos comunes
elementos_comunes <- intersect(columna_3TG, columna_5XFAD)

# Crear un nuevo dataframe con los elementos comunes
comunes_df <- data.frame(comunes = elementos_comunes)

# Mostrar el dataframe de elementos comunes
print(comunes_df)


columna_3TG<-data_frame(columna_3TG)
columna_5XFAD<-data_frame(columna_5XFAD)

filas_unicas_3TG <- columna_3TG[!(columna_3TG$columna_3TG %in% columna_5XFAD$columna_5XFAD), , drop = FALSE]

# Filas únicas en columna_5XFAD que no están en columna_3TG
filas_unicas_5XFAD <- columna_5XFAD[!(columna_5XFAD$columna_5XFAD %in% columna_3TG$columna_3TG), , drop = FALSE]

nuevo_dataframe <- tabla_control_3TG[tabla_control_3TG$Accession %in% comunes_df$comunes, ]
comunes_control_3TG<-nuevo_dataframe

comunes_control_5XFAD<-tabla_control_5XFAD[tabla_control_5XFAD$Accession %in% comunes_df$comunes, ]

comunes_control_3TG[is.na(comunes_control_3TG)]<- 0
comunes_control_5XFAD[is.na(comunes_control_5XFAD)]<-0

comunes_control_3TG<-comunes_control_3TG[order(comunes_control_3TG$Accession),]
comunes_control_5XFAD<-comunes_control_5XFAD[order(comunes_control_5XFAD$Accession),]
new_index <- 1:nrow(comunes_control_3TG)
rownames(comunes_control_3TG) <- new_index
rownames(comunes_control_5XFAD) <- new_index

sumas <- rowSums(comunes_control_3TG[,-(1:2)])
suma_3TG <- data.frame(Suma = sumas)
a <- ncol(comunes_control_3TG)
a <- a - 2


#calcular la media de los 5XFAD 
sumas <- rowSums(comunes_control_5XFAD[,-(1:2)])
suma_5XFAD <- data.frame(Suma = sumas)
a <- ncol(comunes_control_5XFAD)
a <- a - 2
media_5XFAD <- suma_5XFAD / a
filas_con_media_cero <- media_5XFAD$Suma == 0



sumas <- rowSums(comunes_control_3TG[,-(1:2)])
suma_3TG <- data.frame(Suma = sumas)
a <- ncol(comunes_control_3TG)
a <- a - 2
media_3TG <- suma_3TG / a




entera_5XFAD <- read_excel("proteomica/ejercicio/5XFAD/230223-LFQ_Incl-Isoforms_FILTRADAS.xlsx")


#seleccionar la columna con el código de accesp y las columnas con la abundancia
#luego quiero quitarle toda la info al título para simplificarla ya que he prepaarado unos metadatos
df_5XFAD<-entera_5XFAD
accesion_5XFAD<-select(entera_5XFAD, Accession)
gene_ID_5XFAD<-select(entera_5XFAD, "Gene Symbol")


abundancias_5XFAD<-df_5XFAD[,120:134]
abundancias_5XFAD[is.na(abundancias_5XFAD)]
colnam<-colnames(abundancias_5XFAD)
colnam <- gsub(".*F(\\d+).*", "\\1", colnam)
colnam <- paste("F", gsub("\\D+", "", colnam), sep = "")
colnames(abundancias_5XFAD) <- colnam

#crear el df y transponerla y modificar el nombre de las columnas y ponerlo en notacion cientifica
df_5XFAD<-cbind(accesion_5XFAD, gene_ID_5XFAD, abundancias_5XFAD)

sample_metadata_5XFAD <- read_delim("proteomica/ejercicio/5XFAD/sample-metadata-5XFAD.csv", 
                                    delim = "\t", escape_double = FALSE, 
                                    trim_ws = TRUE)


prot_control_5XFAD <- sample_metadata_5XFAD %>%
  filter(experiment == "WT") %>%
  pull("sample-id")

tabla_control_5XFAD <- df_5XFAD %>%
  select(1, 2, all_of(prot_control_5XFAD))


# Obtener las columnas de interés
columna_3TG <- tabla_control_3TG$Accession
columna_5XFAD <- tabla_control_5XFAD$Accession


# Encontrar los elementos comunes
elementos_comunes <- intersect(columna_3TG, columna_5XFAD)

# Crear un nuevo dataframe con los elementos comunes
comunes_df <- data.frame(comunes = elementos_comunes)

# Mostrar el dataframe de elementos comunes
print(comunes_df)


columna_3TG<-data_frame(columna_3TG)
columna_5XFAD<-data_frame(columna_5XFAD)

filas_unicas_3TG <- columna_3TG[!(columna_3TG$columna_3TG %in% columna_5XFAD$columna_5XFAD), , drop = FALSE]

# Filas únicas en columna_5XFAD que no están en columna_3TG
filas_unicas_5XFAD <- columna_5XFAD[!(columna_5XFAD$columna_5XFAD %in% columna_3TG$columna_3TG), , drop = FALSE]

nuevo_dataframe <- tabla_control_3TG[tabla_control_3TG$Accession %in% comunes_df$comunes, ]
comunes_control_3TG<-nuevo_dataframe

comunes_control_5XFAD<-tabla_control_5XFAD[tabla_control_5XFAD$Accession %in% comunes_df$comunes, ]

comunes_control_3TG[is.na(comunes_control_3TG)]<- 0
comunes_control_5XFAD[is.na(comunes_control_5XFAD)]<-0

comunes_control_3TG<-comunes_control_3TG[order(comunes_control_3TG$Accession),]
comunes_control_5XFAD<-comunes_control_5XFAD[order(comunes_control_5XFAD$Accession),]
new_index <- 1:nrow(comunes_control_3TG)
rownames(comunes_control_3TG) <- new_index
rownames(comunes_control_5XFAD) <- new_index

sumas <- rowSums(comunes_control_3TG[,-(1:2)])
suma_3TG <- data.frame(Suma = sumas)
a <- ncol(comunes_control_3TG)
a <- a - 2


#calcular la media de los 5XFAD 
sumas <- rowSums(comunes_control_5XFAD[,-(1:2)])
suma_5XFAD <- data.frame(Suma = sumas)
a <- ncol(comunes_control_5XFAD)
a <- a - 2
media_5XFAD <- suma_5XFAD / a
filas_con_media_cero <- media_5XFAD$Suma == 0



sumas <- rowSums(comunes_control_3TG[,-(1:2)])
suma_3TG <- data.frame(Suma = sumas)
a <- ncol(comunes_control_3TG)
a <- a - 2
media_3TG <- suma_3TG / a










comunes_control_3TG <- comunes_control_3TG[!filas_con_media_cero, ]
comunes_control_5XFAD <- comunes_control_5XFAD[!filas_con_media_cero, ]
media_5XFAD <- media_5XFAD[!filas_con_media_cero, ]


new_index <- 1:nrow(comunes_control_3TG)
rownames(comunes_control_3TG) <- new_index
rownames(comunes_control_5XFAD) <- new_index

# Inicializar un dataframe vacío para almacenar los resultados
comunes_control_3TG_normalizado_numeros <- data.frame(matrix(ncol = ncol(comunes_control_3TG) - (2), nrow = nrow(comunes_control_3TG)))
# Copiar los nombres de las columnas del dataframe original

colnames(comunes_control_3TG_normalizado_numeros) <- colnames(comunes_control_3TG[-(1:2)])
media_5XFAD<-data_frame(media_5XFAD)


# Realizar la división fila a fila y columna a columna
for (i in 1:nrow(comunes_control_3TG[,-(1:2)])) {
  fila <- comunes_control_3TG[i,-(1:2)]
  for (j in 1:(ncol(comunes_control_3TG[,-(1:2)]))) {
    resultado <- fila[j] / media_5XFAD[i, 1]
    comunes_control_3TG_normalizado_numeros[i, j] <- resultado
  }
}

# Inicializar un dataframe vacío para almacenar los resultados
comunes_control_5XFAD_normalizado_numeros <- data.frame(matrix(ncol = ncol(comunes_control_5XFAD) - (2), nrow = nrow(comunes_control_5XFAD)))
# Copiar los nombres de las columnas del dataframe original

colnames(comunes_control_5XFAD_normalizado_numeros) <- colnames(comunes_control_5XFAD[-(1:2)])
media_5XFAD<-data_frame(media_5XFAD)


# Realizar la división fila a fila y columna a columna
for (i in 1:nrow(comunes_control_5XFAD[,-(1:2)])) {
  fila <- comunes_control_5XFAD[i,-(1:2)]
  for (j in 1:(ncol(comunes_control_5XFAD[,-(1:2)]))) {
    resultado <- fila[j] / media_5XFAD[i, 1]
    comunes_control_5XFAD_normalizado_numeros[i, j] <- resultado
  }
}


comunes_control_3TG_normalizado<-cbind(comunes_control_3TG[,1], comunes_control_3TG_normalizado_numeros)

comunes_control_5XFAD_normalizado<-cbind(comunes_control_5XFAD[,1], comunes_control_5XFAD_normalizado_numeros)







#Calcular normalidad en ambos y ver cuantos la cumplen
#resultado del número de proteinas que no siguen normalifad
c <- vector()
for (i in 1:nrow(comunes_control_3TG_normalizado_numeros)) {
  fila <- as.numeric(comunes_control_3TG_normalizado_numeros[i, ])
  resultado <- shapiro.test(fila)
  c[i] <- resultado$p.value
}
num_valores_menor_0_05 <- sum(c < 0.05)

print(num_valores_menor_0_05)

d <- vector()
for (i in 1:nrow(comunes_control_5XFAD_normalizado_numeros)) {
  fila <- as.numeric(comunes_control_5XFAD_normalizado_numeros[i, ])
  resultado <- shapiro.test(fila)
  d[i] <- resultado$p.value
}
num_valores_menor_0_05 <- sum(d < 0.05)

print(num_valores_menor_0_05)


#T-student 
#resultado 246 proteinas con diferencias


p_valor_controles <- c()
for (i in 1:nrow(comunes_control_3TG_normalizado_numeros)) {
  valores_3TG<- as.numeric(comunes_control_3TG_normalizado_numeros[i, ])
  valores_5XFAD <- as.numeric(comunes_control_5XFAD_normalizado_numeros[i, ])
  resultado_t_test <- t.test(valores_3TG, valores_5XFAD)
  p_valor_controles<-c(p_valor_controles, resultado_t_test$p.value)
}
resultado_final_test<-data.frame(comunes_control_3TG[,1], p_value = p_valor_controles)

num_valores_menor_0_05 <- sum(resultado_final_test[,2] < 0.05)

print(num_valores_menor_0_05)

#Calcular media y desviaciones típicas

sumas <- rowSums(comunes_control_5XFAD_normalizado_numeros[,-(1:2)])
suma_5XFAD_n <- data.frame(Suma = sumas)
a<-ncol(comunes_control_5XFAD)
a<-a-2
media_5XFAD_n<-(suma_5XFAD_n/a)

sumas <- rowSums(comunes_control_3TG_normalizado_numeros[,-(1:2)])
suma_3TG_n <- data.frame(Suma = sumas)
b<-ncol(comunes_control_3TG)
b<-b-2
media_3TG_n<-(suma_3TG_n/b)

cociente<-media_3TG_n/media_5XFAD_n
log2cociente<-apply(cociente, 1, log2)
log2cociente<-data_frame(log2cociente)

p_valor_controles<-data_frame(p_valor_controles)
log10pvalor<-apply(p_valor_controles, 1, log10)
log10pvalor<-data_frame(log10pvalor)
log10pvalor<-apply(log10pvalor, 1, function(x) -x)
log10pvalor<-data_frame(log10pvalor)


vulcanot<-data_frame(comunes_control_5XFAD[,1:2], log2cociente, log10pvalor)
# 
# 
# ggplot(vulcanot, aes(x = log2cociente, y = log10pvalor)) +
#   geom_point() +
#   geom_vline(xintercept = -1, linetype = "dashed", color = "green") +
#   geom_vline(xintercept = 1, linetype = "dashed", color = "green") +
#   geom_hline(yintercept = 1.9999999999999996, linetype = "dashed", color = "red") +  
#   labs(
#     title = "Vulcano plot 3TG/5XFAD",
#     x = "Log2 Fold Change",
#     y = "-log10(P-Value)"
#   )
# 
# 
# 
# #Vulcanoo con todos los nombres, se ve un poco mal pero de aquí he obtenido manualmente
# #los códigos de los valores que quería representar en el siguinte dataframe
# ggplot(vulcanot, aes(x = log2cociente, y = log10pvalor )) +
#   geom_point() +
#   geom_hline(yintercept = 1.30102999566, linetype = "dashed", color = "red") +  
#   geom_text(
#     data = subset(vulcanot, log10pvalor < 12 | log10pvalor > 8),  # Filtrar por valores
#     aes(label = comunes_control_5XFAD[, 1]),
#     hjust = 0, vjust = 0.5, color = "blue"  # Ajustar valores de hjust y vjust
#   ) + labs(
#     tittle = "Vulcano plot 3TG/5XFAD",
#     x = "Log2 Fold Change",
#     y = "-log10(P-Value)"
#   )




########################################################################################################################
########################################################################################################################
#######################################################################################################################
#voy a coger las 12 desreguladas según las x/y, extrayendola de los datos 
#######################################################################################################################
#########################################################################################################################
#########################################################################################################################
#####################################################################################################################
########################################################################################################################
#######################################################################################################################
#######################
p_valor001<-1.9999999999999996


vulcanot_etiquetas<- vulcanot %>% filter(log2cociente < -1 | log2cociente > 1)
vulcanot_etiquetas<- vulcanot_etiquetas %>% filter(log10pvalor>p_valor001)



# mas altos sobrexpresados


tops<- vulcanot_etiquetas %>% filter(log2cociente>1)
tops <- tops %>% arrange(desc(log10pvalor)) %>%  # Ordenar el DataFrame por 'log10pvalor' en orden descendente
  head(3)                         # Seleccionar las primeras tres filas

top_rows<-tops


# Obtener los valores de la columna 'Accesion' de las tres filas
sobreexpresadas_evidentes_accesion <- top_rows$Accession

# mas altos subrexpresados

high_negative_rows <- vulcanot_etiquetas %>%
  filter(log2cociente < -1) %>%   # Filtrar filas con 'log2cociente' negativo
  arrange(desc(log10pvalor)) %>%  # Ordenar el DataFrame resultante por 'log10pvalor' en orden descendente
  head(3)                         # Seleccionar las primeras tres filas

# Obtener los valores de la columna 'Accesion' de las tres filas
subrrepresentadas_evidentes_accesion <- high_negative_rows$Accession

vulcanot_etiquetas_evidente<- vulcanot_etiquetas  %>% filter(log10pvalor>p_valor001)

far_rows <- vulcanot_etiquetas_evidente %>%
  arrange(desc(log2cociente)) %>%  # Ordenar el DataFrame por 'log10pvalor' en orden descendente
  head(3)                         # Seleccionar las primeras tres filas

# Obtener los valores de la columna 'Accesion' de las tres filas
mas_sobreexpresadas_accesion <- far_rows$Accession



# Obtener los tres valores máximos de 'log10pvalor' para filas con 'log2cociente' negativo
far_negative_rows <- vulcanot_etiquetas %>%
  filter(log2cociente < (-1) & log10pvalor > p_valor001) %>%   # Filtrar filas con 'log2cociente' negativo
  arrange(log2cociente) %>%  # Ordenar el DataFrame resultante por 'log10pvalor' en orden descendente
  head(3)                         # Seleccionar las primeras tres filas

mas_subrrepresentadas_accesion <- far_negative_rows$Accession

accession_values <- c(mas_sobreexpresadas_accesion, mas_subrrepresentadas_accesion, 
                      subrrepresentadas_evidentes_accesion, sobreexpresadas_evidentes_accesion)
accession_values <- data.frame("Accession" = accession_values)
subset_desrreguladas<- subset(vulcanot, Accession %in% accession_values$Accession)
#################################################################################################
########################################################################################################################
#######################################################################################################################
########################################################################################################################
########################################################################################################################
#######################################################################################################################


p_valor001<-1.9999999999999996
sobrexpresadas<-filter(vulcanot, log2cociente>1 & log10pvalor>p_valor001)
subexpresadas<-filter(vulcanot, log2cociente<(-1) & log10pvalor>p_valor001)
resto<-anti_join(vulcanot, sobrexpresadas) %>% anti_join(subexpresadas)
sobrexpresadas$estado<-"Sobrexpresado"
subexpresadas$estado<-"Subexpresado"

# Crear el gráfico de tipo volcán con ggplot2
#Crear el gráfico de tipo volcán con ggplot2
ggplot() +
  geom_point(data = sobrexpresadas, aes(x = log2cociente, y = log10pvalor, color=estado), size = 0.5)+
  geom_point(data = subexpresadas, aes(x = log2cociente, y = log10pvalor, color=estado), size = 0.5)+
  geom_point(data = resto, aes(x = log2cociente, y = log10pvalor), color= "grey", size = 0.5)+
  
  geom_vline(xintercept = -1, linetype = "dashed", color = "black") +
  geom_vline(xintercept = 1, linetype = "dashed", color = "black") +
  
  geom_hline(yintercept = 1.9999999999999996, linetype = "dashed", color = "black") +
  
  geom_label_repel(data = subset_desrreguladas,
                   aes(x = log2cociente, y = log10pvalor, label = `Gene Symbol`),
                   color = "black", box.padding = 0.5, point.padding = 0.3,
                   force = 10, nudge_x = 0.00000001, nudge_y = 0.00000001)  +
  
  
  
  labs(
    title = "Vulcano plot 3TG/5XFAD",
    x = bquote(log[2](Fold_Change)),
    y =  bquote(-log[10](pvalue)),
    color = "Estado"
  ) +
  scale_color_manual(values = c("Sobrexpresado" = "lightsalmon", "Subexpresado" = "cadetblue3")) +
  
  theme(panel.background = element_rect(fill = "white"),
        axis.line = element_line(color = "black"),  # Color de las líneas de los ejes
        axis.text = element_text(color = "black"),  # Color del texto de los ejes
        axis.title = element_text(color = "black")  # Color de los títulos de los ejes
  )

# 
# 
# # Luego, utiliza write.xlsx para escribir tus datos en un archivo Excel
# write.xlsx(sobrexpresadas, "proteomica/ejercicio/sobrexpresadas.xlsx", sheetName = "sobrexpresadas", rowNames = FALSE, append = FALSE)
# 
# write.xlsx(subexpresadas, "proteomica/ejercicio/subexpresadas.xlsx", sheetName = "subexpresadas", rowNames = FALSE, append = FALSE)
# 

